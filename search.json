[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Felipe Mattioni Maturana Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/incremental.html","id":"normalize-your-data","dir":"Articles","previous_headings":"","what":"Normalize your data","title":"Incremental test analyses","text":"get started, let’s read example data ramp incremental test comes package. test following protocol: 4-min baseline period 20 W; ramp increase 25 W/min.  things note: time column normalized. , know explicitly baseline, ramp; work rate column. fixed incremental_normalize() function. Since work rate column, set argument work_rate_magic = TRUE. argument allow us calculate work rates throughout test. can see now data aware two different phases test: baseline ramp period: Additionally, new column created: work_rate: can also plot check done. Note constant-load baseline (20 W), constant increase power output (25 W/min) ramp phase:  can therefore quickly analyze peak power output :","code":"library(whippr) library(ggplot2) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  path_example <- system.file(\"ramp_cosmed.xlsx\", package = \"whippr\")  df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  df #> # Metabolic cart: COSMED  #> # Data status: raw data #> # Time column: t #> # A tibble: 390 × 119 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     0 23.3  0.808  18.8  654.  579.  131.   34.6     28.7      32.4     8.53 #>  2     6  9.45 3.09   29.2 1111. 1038.  488.  152.      26.3      28.1    14.5  #>  3    10 14.3  1.87   26.8 1064.  963.  291.   93.4     25.2      27.8    13.9  #>  4    15 14.2  2.05   29.1 1136. 1032.  321.  101.      25.6      28.2    14.8  #>  5    19 13.4  2.05   27.5 1083.  999.  319.  103.      25.4      27.5    14.1  #>  6    24 13.3  2.08   27.7 1104. 1021.  323.  106.      25.1      27.2    14.4  #>  7    28 14.0  1.78   25.0 1017.  948.  274.   93.8     24.6      26.3    13.3  #>  8    33 11.4  2.11   24.2  971.  919.  326.  111.      24.9      26.3    12.7  #>  9    38 13.2  2.00   26.5 1008.  973.  315.  102.      26.3      27.2    13.1  #> 10    43 11.5  2.09   23.9  921.  904.  326.  109.      25.9      26.4    12.0  #> # ℹ 380 more rows #> # ℹ 108 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, … df %>%   ggplot(aes(t, VO2)) +   geom_point(shape = 21, size = 4, fill = \"white\") +   theme_whippr() ramp_normalized <- df %>%  incremental_normalize(    .data = .,    incremental_type = \"ramp\",    has_baseline = TRUE,    baseline_length = 240, ## 4-min baseline    work_rate_magic = TRUE,    baseline_intensity = 20, ## baseline was performed at 20 W    ramp_increase = 25 ## 25 W/min ramp  )  ramp_normalized #> # Metabolic cart: COSMED  #> # Data status: raw data - ramp normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 390 × 121 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1  -240 23.3  0.808  18.8  654.  579.  131.   34.6     28.7      32.4     8.53 #>  2  -234  9.45 3.09   29.2 1111. 1038.  488.  152.      26.3      28.1    14.5  #>  3  -230 14.3  1.87   26.8 1064.  963.  291.   93.4     25.2      27.8    13.9  #>  4  -225 14.2  2.05   29.1 1136. 1032.  321.  101.      25.6      28.2    14.8  #>  5  -221 13.4  2.05   27.5 1083.  999.  319.  103.      25.4      27.5    14.1  #>  6  -216 13.3  2.08   27.7 1104. 1021.  323.  106.      25.1      27.2    14.4  #>  7  -212 14.0  1.78   25.0 1017.  948.  274.   93.8     24.6      26.3    13.3  #>  8  -207 11.4  2.11   24.2  971.  919.  326.  111.      24.9      26.3    12.7  #>  9  -202 13.2  2.00   26.5 1008.  973.  315.  102.      26.3      27.2    13.1  #> 10  -197 11.5  2.09   23.9  921.  904.  326.  109.      25.9      26.4    12.0  #> # ℹ 380 more rows #> # ℹ 110 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, … ramp_normalized %>%    distinct(protocol_phase) #> # Metabolic cart: COSMED  #> # Data status: raw data - ramp normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 2 × 1 #>   protocol_phase #>   <chr>          #> 1 baseline       #> 2 ramp ramp_normalized %>%    select(t, work_rate) #> # Metabolic cart: COSMED  #> # Data status: raw data - ramp normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 390 × 2 #>        t work_rate #>    <dbl>     <dbl> #>  1  -240        20 #>  2  -234        20 #>  3  -230        20 #>  4  -225        20 #>  5  -221        20 #>  6  -216        20 #>  7  -212        20 #>  8  -207        20 #>  9  -202        20 #> 10  -197        20 #> # ℹ 380 more rows ramp_normalized %>%    plot_incremental() ramp_normalized %>%    slice_max(work_rate) %>%    select(work_rate) #> # Metabolic cart: COSMED  #> # Data status: raw data - ramp normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 1 × 1 #>   work_rate #>       <dbl> #> 1      303."},{"path":"/articles/incremental.html","id":"step-test","dir":"Articles","previous_headings":"Normalize your data","what":"Step test","title":"Incremental test analyses","text":"step-incremental test? work rate transformation work? step test important actual power output step, also linearization power output. illustrate mean, let’s take look example: Note data contains weird column names. , simplicity, let’s rename VO2 column. test following protocol: resting period (.e, 0 W) 2 minutes; step protocol starting 50 W increasing 25 W every 3 minutes.  , let’s first normalize data: can visualize done work rate plot_incremental() function:  can note, two working rates created: one actual power output, another one linearization power output. useful, example, calculate peak power output:","code":"## get file path from example data path_example_step <- system.file(\"step_cortex.xlsx\", package = \"whippr\")  ## read data from step test df_step <- read_data(path = path_example_step, metabolic_cart = \"cortex\")  df_step #> # Metabolic cart: CORTEX  #> # Data status: raw data #> # Time column: t #> # A tibble: 792 × 29 #>        t    VT    AF `V'E (BTPS)` `V'max (BTPS)` FEetO2 FEetCO2 PetO2 PetCO2 #>    <dbl> <dbl> <dbl>        <dbl>          <dbl>  <dbl>   <dbl> <dbl>  <dbl> #>  1   4.8  0.72  18.5         13.3           0.42   15.9    4.6   106.   30.8 #>  2   7.9  0.76  19.4         14.7           0.46   16.0    4.63  107.   31   #>  3  10.9  0.77  19.9         15.3           0.47   16.0    4.74  107.   31.7 #>  4  13.9  0.76  20           15.1           0.47   16.2    4.65  109.   31.1 #>  5  17.5  0.95  16.7         15.8           0.49   16.1    4.76  108.   31.8 #>  6  20.9  0.83  17.5         14.6           0.56   16.5    4.54  110.   30.4 #>  7  24.3  0.75  17.8         13.3           0.45   16.5    4.54  110.   30.4 #>  8  28.2  0.8   15.3         12.3           0.42   16.3    4.69  109.   31.4 #>  9  31.9  0.8   16.5         13.1           0.48   16.4    4.56  110.   30.5 #> 10  35.7  0.72  15.8         11.5           0.43   16.2    4.7   109.   31.4 #> # ℹ 782 more rows #> # ℹ 20 more variables: `V'O2 (STPD)` <dbl>, `V'CO2` <dbl>, R <dbl>, #> #   `V'O2/kg` <dbl>, METS <dbl>, `V'E/V'O2` <dbl>, `V'E/V'CO2` <dbl>, #> #   `VD/VT (est)` <dbl>, HF <dbl>, La <chr>, W <dbl>, EU <dbl>, `EU/kg` <dbl>, #> #   CHO <dbl>, FETT <dbl>, EFF <chr>, `%AR` <dbl>, `V'O2/kg_Lean` <dbl>, #> #   `EE/kg_Lean` <dbl>, AR <dbl> df_step_renamed <- df_step %>%    rename(VO2 = `V'O2 (STPD)`) df_step_renamed %>%    ggplot(aes(t, VO2)) +   geom_point(shape = 21, size = 4, fill = \"white\") +   theme_whippr() step_normalized <- df_step %>%  incremental_normalize(    .data = .,    incremental_type = \"step\",    has_baseline = TRUE,    baseline_length = 120, ## 2 min baseline    work_rate_magic = TRUE,     baseline_intensity = 0, ## baseline was resting on the bike, so intensity is 0 W    step_start = 50, ## step protocol started at 50 W    step_increase = 25, ## step increase was 25 W    step_length = 180 ## the intensity increased every 3 minutes  )  step_normalized #> # Metabolic cart: CORTEX  #> # Data status: raw data - step normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 120-s baseline at 0 W and 180-s steps of 25 W starting at 50 W #> # A tibble: 792 × 33 #>         t    VT    AF `V'E (BTPS)` `V'max (BTPS)` FEetO2 FEetCO2 PetO2 PetCO2 #>     <dbl> <dbl> <dbl>        <dbl>          <dbl>  <dbl>   <dbl> <dbl>  <dbl> #>  1 -115.   0.72  18.5         13.3           0.42   15.9    4.6   106.   30.8 #>  2 -112.   0.76  19.4         14.7           0.46   16.0    4.63  107.   31   #>  3 -109.   0.77  19.9         15.3           0.47   16.0    4.74  107.   31.7 #>  4 -106.   0.76  20           15.1           0.47   16.2    4.65  109.   31.1 #>  5 -102.   0.95  16.7         15.8           0.49   16.1    4.76  108.   31.8 #>  6  -99.1  0.83  17.5         14.6           0.56   16.5    4.54  110.   30.4 #>  7  -95.7  0.75  17.8         13.3           0.45   16.5    4.54  110.   30.4 #>  8  -91.8  0.8   15.3         12.3           0.42   16.3    4.69  109.   31.4 #>  9  -88.1  0.8   16.5         13.1           0.48   16.4    4.56  110.   30.5 #> 10  -84.3  0.72  15.8         11.5           0.43   16.2    4.7   109.   31.4 #> # ℹ 782 more rows #> # ℹ 24 more variables: `V'O2 (STPD)` <dbl>, `V'CO2` <dbl>, R <dbl>, #> #   `V'O2/kg` <dbl>, METS <dbl>, `V'E/V'O2` <dbl>, `V'E/V'CO2` <dbl>, #> #   `VD/VT (est)` <dbl>, HF <dbl>, La <chr>, W <dbl>, EU <dbl>, `EU/kg` <dbl>, #> #   CHO <dbl>, FETT <dbl>, EFF <chr>, `%AR` <dbl>, `V'O2/kg_Lean` <dbl>, #> #   `EE/kg_Lean` <dbl>, AR <dbl>, protocol_phase <chr>, work_rate <dbl>, #> #   step_work_rate <dbl>, step <fct> step_normalized %>%    plot_incremental() step_normalized %>%    select(t, protocol_phase:step) #> # Metabolic cart: CORTEX  #> # Data status: raw data - step normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 120-s baseline at 0 W and 180-s steps of 25 W starting at 50 W #> # A tibble: 792 × 5 #>         t protocol_phase work_rate step_work_rate step   #>     <dbl> <chr>              <dbl>          <dbl> <fct>  #>  1 -115.  baseline               0              0 step_0 #>  2 -112.  baseline               0              0 step_0 #>  3 -109.  baseline               0              0 step_0 #>  4 -106.  baseline               0              0 step_0 #>  5 -102.  baseline               0              0 step_0 #>  6  -99.1 baseline               0              0 step_0 #>  7  -95.7 baseline               0              0 step_0 #>  8  -91.8 baseline               0              0 step_0 #>  9  -88.1 baseline               0              0 step_0 #> 10  -84.3 baseline               0              0 step_0 #> # ℹ 782 more rows step_normalized %>%    slice_max(work_rate) %>%    select(work_rate) #> # Metabolic cart: CORTEX  #> # Data status: raw data - step normalized #> # Time column: t #> # Test type: incremental #> # Protocol: 120-s baseline at 0 W and 180-s steps of 25 W starting at 50 W #> # A tibble: 1 × 1 #>   work_rate #>       <dbl> #> 1      252."},{"path":"/articles/incremental.html","id":"recognize-bad-breaths","dir":"Articles","previous_headings":"","what":"Recognize bad breaths","title":"Incremental test analyses","text":"might noticed, two incremental test examples bad breaths (outliers) deleted prior data analysis. can easily achieved detect_outliers() function. Two methods detecting outliers available: linear anomaly detection. linear method going fit two linear models: one baseline period, another one ramp (step) period. anomaly detection, however, uses anomalize package, decompose time series, perform anomaly detection. Let’s see action:","code":""},{"path":"/articles/incremental.html","id":"linear","dir":"Articles","previous_headings":"Recognize bad breaths","what":"Linear","title":"Incremental test analyses","text":"Thereafter, can easily remove detected outliers like : Note set 95% confidence level detecting outliers. can easily change , example, 99%:","code":"## detect ramp outliers data_ramp_outliers <- detect_outliers(   .data = ramp_normalized,   test_type = \"incremental\",   vo2_column = \"VO2\",   cleaning_level = 0.95,   method_incremental = \"linear\",   verbose = TRUE  ) #> ✔ Detecting outliers #> • 2 outlier(s) found in baseline #> • 15 outlier(s) found in ramp  data_ramp_outliers #> # Metabolic cart: COSMED  #> # Data status: raw data - outliers detected #> # Time column: t #> # VO2 column: VO2 #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 390 × 134 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1  -240 23.3  0.808  18.8  654.  579.  131.   34.6     28.7      32.4     8.53 #>  2  -234  9.45 3.09   29.2 1111. 1038.  488.  152.      26.3      28.1    14.5  #>  3  -230 14.3  1.87   26.8 1064.  963.  291.   93.4     25.2      27.8    13.9  #>  4  -225 14.2  2.05   29.1 1136. 1032.  321.  101.      25.6      28.2    14.8  #>  5  -221 13.4  2.05   27.5 1083.  999.  319.  103.      25.4      27.5    14.1  #>  6  -216 13.3  2.08   27.7 1104. 1021.  323.  106.      25.1      27.2    14.4  #>  7  -212 14.0  1.78   25.0 1017.  948.  274.   93.8     24.6      26.3    13.3  #>  8  -207 11.4  2.11   24.2  971.  919.  326.  111.      24.9      26.3    12.7  #>  9  -202 13.2  2.00   26.5 1008.  973.  315.  102.      26.3      27.2    13.1  #> 10  -197 11.5  2.09   23.9  921.  904.  326.  109.      25.9      26.4    12.0  #> # ℹ 380 more rows #> # ℹ 123 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, … data_ramp_outliers %>%    plot_outliers() data_ramp_outliers %>%    filter(outlier == \"no\") #> # Metabolic cart: COSMED  #> # Data status: raw data - outliers detected #> # Time column: t #> # VO2 column: VO2 #> # Test type: incremental #> # Protocol: 240-s baseline at 20 W and a 25-W/min ramp #> # A tibble: 373 × 134 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1  -240 23.3  0.808  18.8  654.  579.  131.   34.6     28.7      32.4     8.53 #>  2  -234  9.45 3.09   29.2 1111. 1038.  488.  152.      26.3      28.1    14.5  #>  3  -230 14.3  1.87   26.8 1064.  963.  291.   93.4     25.2      27.8    13.9  #>  4  -225 14.2  2.05   29.1 1136. 1032.  321.  101.      25.6      28.2    14.8  #>  5  -221 13.4  2.05   27.5 1083.  999.  319.  103.      25.4      27.5    14.1  #>  6  -216 13.3  2.08   27.7 1104. 1021.  323.  106.      25.1      27.2    14.4  #>  7  -212 14.0  1.78   25.0 1017.  948.  274.   93.8     24.6      26.3    13.3  #>  8  -207 11.4  2.11   24.2  971.  919.  326.  111.      24.9      26.3    12.7  #>  9  -202 13.2  2.00   26.5 1008.  973.  315.  102.      26.3      27.2    13.1  #> 10  -197 11.5  2.09   23.9  921.  904.  326.  109.      25.9      26.4    12.0  #> # ℹ 363 more rows #> # ℹ 123 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, … detect_outliers(   .data = ramp_normalized,   test_type = \"incremental\",   vo2_column = \"VO2\",   cleaning_level = 0.99, ## changed to 99%   method_incremental = \"linear\",   verbose = TRUE  ) %>%    plot_outliers() #> ✔ Detecting outliers #> • 8 outlier(s) found in ramp"},{"path":"/articles/incremental.html","id":"anomaly","dir":"Articles","previous_headings":"Recognize bad breaths","what":"Anomaly","title":"Incremental test analyses","text":"Now let’s see anomaly detection performs:","code":"detect_outliers(   .data = ramp_normalized,   test_type = \"incremental\",   vo2_column = \"VO2\",   cleaning_level = 0.95,   method_incremental = \"anomaly\", ## changed to anomaly detection   verbose = TRUE  ) %>%    plot_outliers() #> ✔ Detecting outliers #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo #> • 6 outlier(s) found in ramp"},{"path":"/articles/incremental.html","id":"mean-response-time","dir":"Articles","previous_headings":"","what":"Mean response time","title":"Incremental test analyses","text":"Work progress.","code":""},{"path":"/articles/incremental.html","id":"vo2max-maximal-oxygen-uptake","dir":"Articles","previous_headings":"","what":"VO2max (maximal oxygen uptake)","title":"Incremental test analyses","text":"two functions can use analyze VO2max: incremental_normalize(): normalize incremental test data detect_outliers(): detect outliers interpolate(): interpolate data breath--breath second--second perform_average(): perform average second--second data perform_max(): performs final steps (interpolate() perform_average()).","code":""},{"path":"/articles/incremental.html","id":"perform_max","dir":"Articles","previous_headings":"VO2max (maximal oxygen uptake)","what":"perform_max()","title":"Incremental test analyses","text":"","code":"results_vo2max <- data_ramp_outliers %>% ## data was already normalized and outliers were detected   perform_max(     .data = .,     vo2_column = \"VO2\",     vo2_relative_column = \"VO2/Kg\",     heart_rate_column = \"HR\",     rer_column = \"R\",     average_method = \"bin\",     average_length = 30,     plot = TRUE,     verbose = FALSE   )  results_vo2max #> # A tibble: 1 × 6 #>   VO2max_absolute VO2max_relative POpeak HRmax RERmax plot   #>             <dbl>           <dbl>  <int> <dbl>  <dbl> <list> #> 1           3524.            46.0    303   193   1.13 <gg> results_vo2max$plot[[1]]"},{"path":"/articles/incremental.html","id":"vo2_max","dir":"Articles","previous_headings":"VO2max (maximal oxygen uptake)","what":"vo2_max()","title":"Incremental test analyses","text":"","code":"vo2_max(   .data = df, ## data from `read_data()`   vo2_column = \"VO2\",   vo2_relative_column = \"VO2/Kg\",   heart_rate_column = \"HR\",   rer_column = \"R\",   detect_outliers = TRUE,   average_method = \"bin\",   average_length = 30,   plot = TRUE,   verbose = TRUE,   ## arguments for `incremental_normalize()`   incremental_type = \"ramp\",   has_baseline = TRUE,   baseline_length = 240, ## 4-min baseline   work_rate_magic = TRUE, ## produce a work rate column   baseline_intensity = 20, ## baseline was performed at 20 W   ramp_increase = 25, ## 25 W/min ramp   ## arguments for `detect_outliers()`   test_type = \"incremental\",   cleaning_level = 0.95,    method_incremental = \"linear\" ) #> ────────────────────────────  * V̇O₂ max analysis *  ──────────────────────────── #> ✔ Normalizing incremental data... #> ✔ Detecting outliers #> • 2 outlier(s) found in baseline #> • 15 outlier(s) found in ramp #> ✔ Filtering out outliers... #> ✔ Interpolating from breath-by-breath into second-by-second... #> ✔ Performing averages... #> # A tibble: 1 × 6 #>   VO2max_absolute VO2max_relative POpeak HRmax RERmax plot   #>             <dbl>           <dbl>  <int> <dbl>  <dbl> <list> #> 1           3524.            46.0    303   193   1.13 <gg>"},{"path":"/articles/incremental.html","id":"ventilatory-thresholds","dir":"Articles","previous_headings":"","what":"Ventilatory thresholds","title":"Incremental test analyses","text":"Work progress.","code":""},{"path":"/articles/vo2_kinetics.html","id":"read-the-data","dir":"Articles","previous_headings":"","what":"Read the data","title":"VO2 Kinetics Analysis","text":"first step read raw data read_data() function. going use example file comes whippr, file exported COSMED metabolic cart. can see following graph, protocol 3 transitions baseline exercise intensity exercise intensity gas exchange threshold. Therefore, VO2 kinetics test moderate-intensity domain. specific case, following done: 3 x 6-min baseline periods 20 W. 3 x 6-min transition periods power output associated 90% gas exchange threshold.","code":"library(whippr)  raw_data <- read_data(path = system.file(\"example_cosmed.xlsx\", package = \"whippr\"), metabolic_cart = \"cosmed\", time_column = \"t\")  raw_data #> # Metabolic cart: COSMED  #> # Data status: raw data #> # Time column: t #> # A tibble: 754 × 119 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     2  8.08 1.19   9.60  380.  301.  185.   52.9     25.3      31.9     4.58 #>  2     4 23.2  0.915 21.2   864.  665.  141.   40.8     24.5      31.9    10.4  #>  3     8 15.6  2.11  32.9  1317. 1075.  325.   97.2     25.0      30.6    15.9  #>  4    11 20.6  1.18  24.4   894.  714.  188.   49.2     27.3      34.1    10.8  #>  5    14 23.3  0.947 22.1   822.  647.  150.   39.4     26.9      34.1     9.90 #>  6    18 14.7  2.28  33.6  1347. 1126.  351.  108.      24.9      29.8    16.2  #>  7    23 11.2  2.32  26.1   980.  848.  364.  107.      26.6      30.7    11.8  #>  8    28 13.2  2.18  28.8  1147.  981.  336.  105.      25.2      29.4    13.8  #>  9    31 17.7  1.51  26.7  1048.  860.  234.   68.8     25.5      31.0    12.6  #> 10    35 14.2  1.68  23.8   973.  794.  257.   79.3     24.5      30.0    11.7  #> # ℹ 744 more rows #> # ℹ 108 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, … library(ggplot2)  raw_data %>%    ggplot(aes(t, VO2)) +   geom_point(shape = 21, size = 3, fill = \"white\") +   theme_whippr()"},{"path":"/articles/vo2_kinetics.html","id":"perform-the-analysis","dir":"Articles","previous_headings":"","what":"Perform the analysis","title":"VO2 Kinetics Analysis","text":"reading raw data, can move directly performing VO2 kinetics analysis vo2_kinetics(). function : Recognize baseline transition phase Normalize first breath transition safe way prevent time misalignment Recognize outliers Remove outliers Interpolate transition Time-align data Ensemble-average transitions Perform chosen bin-average Fit final mono-exponential model VO2 kinetics options chosen Calculate residuals modeling VO2 kinetics analysis moderate-intensity domain, mono-exponential model used: \\[VO_2\\left(t\\right)=baseline+amplitude\\cdot\\left(1-e^{^{-\\frac{\\left(t-TD\\right)}{τ}}}\\right)\\] : VO2(t) = oxygen uptake given time. baseline = oxygen uptake associated baseline phase. amplitude = steady-state increase increase oxygen uptake baseline. TD = time delay. τ = time constant defined duration time oxygen uptake increase 63% steady-state increase.","code":""},{"path":"/articles/vo2_kinetics.html","id":"important-options","dir":"Articles","previous_headings":"Perform the analysis","what":"Important options","title":"VO2 Kinetics Analysis","text":"vo2_kinetics() must set important options continuing. Protocol-related options: protocol_n_transitions = Number transitions performed. protocol_baseline_length = length baseline (seconds). protocol_transition_length = length transition (seconds). Data cleaning-related options: cleaning_level = numeric scalar 0 1 giving confidence level intervals calculated data cleaning process. Breaths lying outside prediction bands excluded. cleaning_baseline_fit = vector length number protocol_n_transitions, indicating kind fit perform baseline. Either linear exponential. Fitting-related options: fit_level = numeric scalar 0 1 giving confidence level parameter estimates final VO2 kinetics fit. fit_bin_average = bin average performed final fit. fit_phase_1_length = length phase wish exclude final exponential fit, seconds. fit_baseline_length = length baseline perform final linear fit, seconds. fit_transition_length = length transition perform final exponential fit, seconds. analysis performed like following:","code":"results <- vo2_kinetics(   .data = raw_data,   intensity_domain = \"moderate\",   vo2_column = \"VO2\",   protocol_n_transitions = 3,   protocol_baseline_length = 360,   protocol_transition_length = 360,   cleaning_level = 0.95,   cleaning_baseline_fit = c(\"linear\", \"exponential\", \"exponential\"),   fit_level = 0.95,   fit_bin_average = 5,   fit_phase_1_length = 20,   fit_baseline_length = 120,   fit_transition_length = 240,   verbose = TRUE ) #> ──────────────────────────  * V̇O₂ kinetics analysis *  ───────────────────────── #> ✔ Detecting outliers #> • 14 outliers found in transition 1 #> • 15 outliers found in transition 2 #> • 13 outliers found in transition 3 #> ✔ Processing data... #> ✔       └─ Removing outliers #> ✔       └─ Interpolating each transition #> ✔       └─ Ensemble-averaging transitions #> ✔       └─ Performing 5-s bin averages #> ✔ Fitting data... #> ✔       └─ Fitting baseline #> ✔       └─ Fitting transition #> ✔       └─ Calculating residuals #> ✔       └─ Preparing plots #> ──────────────────────────────────  * DONE *  ────────────────────────────────── results #> # A tibble: 1 × 9 #>   data_outliers plot_outliers data_processed data_fitted model  model_summary    #>   <list>        <list>        <list>         <list>      <list> <list>           #> 1 <whippr>      <patchwrk>    <whippr>       <tibble>    <nls>  <tibble [4 × 7]> #> # ℹ 3 more variables: model_residuals <list>, plot_model <list>, #> #   plot_residuals <list>"},{"path":"/articles/vo2_kinetics.html","id":"fit-parameters","dir":"Articles","previous_headings":"","what":"Fit parameters","title":"VO2 Kinetics Analysis","text":"Fit parameters confidence intervals may accessed model_summary column.","code":"results$model_summary[[1]] #> # A tibble: 4 × 7 #>   term     estimate std.error statistic  p.value conf.low conf.high #>   <chr>       <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #> 1 baseline   1028.      15.4      66.6  9.49e-29   996.      1060.  #> 2 Amp        2059.      11.0     188.   4.66e-63  2037.      2081.  #> 3 TD           11.0      1.11      9.93 1.39e-12     8.76      13.2 #> 4 tau          22.0      1.29     17.0  2.00e-20    19.3       24.6"},{"path":"/articles/vo2_kinetics.html","id":"fit-plot","dir":"Articles","previous_headings":"","what":"Fit plot","title":"VO2 Kinetics Analysis","text":"fit plot may accessed plot_model column.","code":"results$plot_model[[1]] #> Warning: Removed 24 rows containing missing values (`geom_line()`). #> Removed 24 rows containing missing values (`geom_line()`)."},{"path":"/articles/vo2_kinetics.html","id":"checking-what-was-done-during-data-cleaning","dir":"Articles","previous_headings":"","what":"Checking what was done during data cleaning","title":"VO2 Kinetics Analysis","text":"data cleaning process may accessed plot_outliers column.","code":"results$plot_outliers[[1]]"},{"path":"/articles/vo2_kinetics.html","id":"model-diagnostics","dir":"Articles","previous_headings":"","what":"Model diagnostics","title":"VO2 Kinetics Analysis","text":"Model residuals plot may accessed plot_residuals column.","code":"results$plot_residuals[[1]]"},{"path":[]},{"path":"/articles/vo2_kinetics.html","id":"raw-data-with-detected-outliers","dir":"Articles","previous_headings":"Additional columns","what":"Raw data with detected outliers","title":"VO2 Kinetics Analysis","text":"raw data additional columns data cleaning process may accessed data_outliers column.","code":"results$data_outliers[[1]] #> # Metabolic cart: COSMED  #> # Data status: raw data - outliers detected #> # Time column: t #> # VO2 column: VO2 #> # Test type: kinetics #> # A tibble: 757 × 131 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     0  8.08 1.19   9.60  380.  301.  185.   52.9     25.3      31.9     4.58 #>  2     2  8.08 1.19   9.60  380.  301.  185.   52.9     25.3      31.9     4.58 #>  3     4 23.2  0.915 21.2   864.  665.  141.   40.8     24.5      31.9    10.4  #>  4     8 15.6  2.11  32.9  1317. 1075.  325.   97.2     25.0      30.6    15.9  #>  5    11 20.6  1.18  24.4   894.  714.  188.   49.2     27.3      34.1    10.8  #>  6    14 23.3  0.947 22.1   822.  647.  150.   39.4     26.9      34.1     9.90 #>  7    18 14.7  2.28  33.6  1347. 1126.  351.  108.      24.9      29.8    16.2  #>  8    23 11.2  2.32  26.1   980.  848.  364.  107.      26.6      30.7    11.8  #>  9    28 13.2  2.18  28.8  1147.  981.  336.  105.      25.2      29.4    13.8  #> 10    31 17.7  1.51  26.7  1048.  860.  234.   68.8     25.5      31.0    12.6  #> # ℹ 747 more rows #> # ℹ 120 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":"/articles/vo2_kinetics.html","id":"processed-data","dir":"Articles","previous_headings":"Additional columns","what":"Processed data","title":"VO2 Kinetics Analysis","text":"processed data (cleaned, interpolated, time-aligned, ensemble-averaged, bin-averaged) may accessed data_processed column.","code":"results$data_processed[[1]] #> # Metabolic cart: COSMED  #> # Data status: processed data - 5-s bin averaged #> # Time column: t #> # VO2 column: VO2 #> # Test type: kinetics #> # A tibble: 145 × 114 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1  -360  27.2  2.80  76.1 3140. 2825.  424.   147.     24.4      27.0     37.8 #>  2  -355  24.1  2.51  61.3 2452. 2202.  386.   128.     25.0      28.5     29.5 #>  3  -350  24.9  2.11  53.7 2218. 1922.  323.   107.     24.7      29.0     26.7 #>  4  -345  23.1  2.09  48.3 2020. 1792.  315.   109.     24.4      28.3     24.3 #>  5  -340  21.2  2.33  49.3 2027. 1833.  354.   121.     24.6      27.5     24.4 #>  6  -335  20.2  2.24  44.1 1790. 1624.  342.   116.     24.9      27.7     21.6 #>  7  -330  18.5  2.50  47.1 1863. 1751.  383.   131.     25.2      27.5     22.4 #>  8  -325  19.6  2.23  44.8 1689. 1625.  346.   114.     26.2      28.1     20.3 #>  9  -320  20.0  1.98  40.1 1526. 1457.  306.   102.     25.8      27.7     18.4 #> 10  -315  20.9  2.06  42.4 1567. 1506.  322.   104.     26.7      28.6     18.9 #> # ℹ 135 more rows #> # ℹ 103 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, Te <dbl>, #> #   Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":"/articles/vo2_kinetics.html","id":"fitted-data","dir":"Articles","previous_headings":"Additional columns","what":"Fitted data","title":"VO2 Kinetics Analysis","text":"data baseline transition fits may accessed data_fitted column.","code":"results$data_fitted[[1]] #> # A tibble: 70 × 8 #>        t   VO2 .fitted .resid   .hat .sigma    .cooksd .std.resid #>    <dbl> <dbl>   <dbl>  <dbl>  <dbl>  <dbl>      <dbl>      <dbl> #>  1  -120  964.   1028. -64.0  0.0400   77.6 0.0298        -0.846  #>  2  -115 1018.   1028. -10.4  0.04     78.8 0.000791      -0.138  #>  3  -110 1145.   1028. 116.   0.04     74.8 0.0989         1.54   #>  4  -105 1018.   1028. -10.1  0.04     78.8 0.000743      -0.134  #>  5  -100 1062.   1028.  34.2  0.04     78.5 0.00852        0.452  #>  6   -95 1046.   1028.  18.3  0.04     78.7 0.00244        0.242  #>  7   -90 1050.   1028.  22.1  0.04     78.7 0.00354        0.292  #>  8   -85 1068.   1028.  39.8  0.04     78.4 0.0115         0.526  #>  9   -80 1029.   1028.   1.16 0.04     78.8 0.00000978     0.0153 #> 10   -75  991.   1028. -37.4  0.04     78.4 0.0102        -0.495  #> # ℹ 60 more rows"},{"path":"/articles/vo2_kinetics.html","id":"model","dir":"Articles","previous_headings":"Additional columns","what":"Model","title":"VO2 Kinetics Analysis","text":"model used fitting mono-exponential model may accessed model column.","code":"results$model[[1]] #> Nonlinear regression model #>   model: VO2 ~ 1028.0768176047 + Amp * (1 - exp(-(t - TD)/tau)) #>    data: data_transition #>     Amp      TD     tau  #> 2058.89   11.00   21.96  #>  residual sum-of-squares: 138148 #>  #> Number of iterations to convergence: 6  #> Achieved convergence tolerance: 1.49e-08  summary(results$model[[1]]) #>  #> Formula: VO2 ~ 1028.0768176047 + Amp * (1 - exp(-(t - TD)/tau)) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> Amp 2058.894     10.962 187.818  < 2e-16 *** #> TD    11.001      1.108   9.929 1.39e-12 *** #> tau   21.958      1.293  16.987  < 2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> Residual standard error: 57.35 on 42 degrees of freedom #>  #> Number of iterations to convergence: 6  #> Achieved convergence tolerance: 1.49e-08"},{"path":"/articles/vo2_kinetics.html","id":"residuals-data","dir":"Articles","previous_headings":"Additional columns","what":"Residuals data","title":"VO2 Kinetics Analysis","text":"model residuals data may accessed model_residuals column.","code":"results$model_residuals[[1]] #> # A tibble: 45 × 7 #>        t   VO2 .fitted .resid standardized_residuals sqrt_abs_standardized_res…¹ #>    <dbl> <dbl>   <dbl>  <dbl>                  <dbl>                       <dbl> #>  1    20 1799.   1720.  78.5                   1.37                        1.17  #>  2    25 1960.   1999. -38.5                  -0.672                       0.820 #>  3    30 2127.   2220. -93.3                  -1.63                        1.28  #>  4    35 2384.   2397. -12.5                  -0.218                       0.467 #>  5    40 2522.   2537. -15.7                  -0.274                       0.523 #>  6    45 2659.   2649.   9.61                  0.167                       0.409 #>  7    50 2755.   2738.  16.3                   0.285                       0.534 #>  8    55 2851.   2809.  41.6                   0.726                       0.852 #>  9    60 2936.   2866.  69.7                   1.22                        1.10  #> 10    65 2885.   2911. -25.5                  -0.444                       0.667 #> # ℹ 35 more rows #> # ℹ abbreviated name: ¹​sqrt_abs_standardized_residuals #> # ℹ 1 more variable: lag_residuals <dbl>"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Felipe Mattioni Maturana. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mattioni Maturana F (2024). whippr: Tools Manipulating Gas Exchange Data. R package version 0.1.2, https://github.com/fmmattioni/whippr, https://fmmattioni.github.io/whippr/.","code":"@Manual{,   title = {whippr: Tools for Manipulating Gas Exchange Data},   author = {Felipe {Mattioni Maturana}},   year = {2024},   note = {R package version 0.1.2, https://github.com/fmmattioni/whippr},   url = {https://fmmattioni.github.io/whippr/}, }"},{"path":"/index.html","id":"whippr-","dir":"","previous_headings":"","what":"Tools for Manipulating Gas Exchange Data","title":"Tools for Manipulating Gas Exchange Data","text":"goal whippr provide set tools manipulating gas exchange data cardiopulmonary exercise testing.","code":""},{"path":"/index.html","id":"why-whippr","dir":"","previous_headings":"","what":"Why whippr?","title":"Tools for Manipulating Gas Exchange Data","text":"name package honor Prof. Brian J Whipp invaluable contribution field exercise physiology.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Manipulating Gas Exchange Data","text":"can install development version whippr Github :","code":"# install.packages(\"remotes\") remotes::install_github(\"fmmattioni/whippr\")"},{"path":[]},{"path":"/index.html","id":"read-data","dir":"","previous_headings":"Use","what":"Read data","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"library(whippr)  ## example file that comes with the package for demonstration purposes path_example <- system.file(\"example_cosmed.xlsx\", package = \"whippr\")  df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  df #> # Metabolic cart: COSMED  #> # Data status: raw data #> # Time column: t #> # A tibble: 754 × 119 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     2  8.08 1.19   9.60  380.  301.  185.   52.9     25.3      31.9     4.58 #>  2     4 23.2  0.915 21.2   864.  665.  141.   40.8     24.5      31.9    10.4  #>  3     8 15.6  2.11  32.9  1317. 1075.  325.   97.2     25.0      30.6    15.9  #>  4    11 20.6  1.18  24.4   894.  714.  188.   49.2     27.3      34.1    10.8  #>  5    14 23.3  0.947 22.1   822.  647.  150.   39.4     26.9      34.1     9.90 #>  6    18 14.7  2.28  33.6  1347. 1126.  351.  108.      24.9      29.8    16.2  #>  7    23 11.2  2.32  26.1   980.  848.  364.  107.      26.6      30.7    11.8  #>  8    28 13.2  2.18  28.8  1147.  981.  336.  105.      25.2      29.4    13.8  #>  9    31 17.7  1.51  26.7  1048.  860.  234.   68.8     25.5      31.0    12.6  #> 10    35 14.2  1.68  23.8   973.  794.  257.   79.3     24.5      30.0    11.7  #> # ℹ 744 more rows #> # ℹ 108 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   Marker <lgl>, FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, #> #   Te <dbl>, Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":"/index.html","id":"interpolate","dir":"","previous_headings":"Use","what":"Interpolate","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"df %>%    interpolate() #> # Metabolic cart: COSMED  #> # Data status: interpolated data #> # Time column: t #> # A tibble: 2,159 × 114 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     2  8.08 1.19   9.60  380.  301.  185.   52.9     25.3      31.9     4.58 #>  2     3 15.6  1.05  15.4   622.  483.  163.   46.8     24.9      31.9     7.50 #>  3     4 23.2  0.915 21.2   864.  665.  141.   40.8     24.5      31.9    10.4  #>  4     5 21.3  1.21  24.1   978.  767.  187.   54.9     24.6      31.6    11.8  #>  5     6 19.4  1.51  27.1  1091.  870.  233.   69.0     24.8      31.3    13.1  #>  6     7 17.5  1.81  30.0  1204.  973.  279.   83.1     24.9      30.9    14.5  #>  7     8 15.6  2.11  32.9  1317. 1075.  325.   97.2     25.0      30.6    15.9  #>  8     9 17.3  1.80  30.1  1176.  955.  279.   81.2     25.7      31.8    14.2  #>  9    10 19.0  1.49  27.2  1035.  834.  233.   65.2     26.5      33.0    12.5  #> 10    11 20.6  1.18  24.4   894.  714.  188.   49.2     27.3      34.1    10.8  #> # ℹ 2,149 more rows #> # ℹ 103 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, Te <dbl>, #> #   Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":[]},{"path":"/index.html","id":"bin-average","dir":"","previous_headings":"Use > Perform averages","what":"Bin-average","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"## example of performing 30-s bin-averages df %>%    interpolate() %>%    perform_average(type = \"bin\", bins = 30) #> # Metabolic cart: COSMED  #> # Data status: averaged data - 30-s bins #> # Time column: t #> # A tibble: 73 × 114 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1     0  19.0  1.33  24.0  932.  744.  207.   58.9     25.8      32.5     11.2 #>  2    30  15.3  1.85  27.1 1097.  904.  284.   87.0     24.8      30.1     13.2 #>  3    60  19.6  1.47  27.1 1133.  892.  223.   69.6     24.1      30.7     13.7 #>  4    90  13.3  2.29  26.0 1043.  885.  353.  111.      24.9      29.5     12.6 #>  5   120  20.5  1.43  27.1 1107.  883.  218.   66.9     24.6      31.0     13.3 #>  6   150  14.4  1.57  22.1  928.  751.  239.   75.5     24.1      29.7     11.2 #>  7   180  23.0  1.18  26.4 1071.  849.  180.   54.4     24.8      31.3     12.9 #>  8   210  16.1  2.17  28.7 1070.  941.  342.  101.      27.0      30.6     12.9 #>  9   240  18.9  1.43  26.1 1058.  880.  219.   68.8     24.7      29.8     12.7 #> 10   270  15.1  1.65  24.5  987.  847.  253.   81.4     24.8      28.9     11.9 #> # ℹ 63 more rows #> # ℹ 103 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, Te <dbl>, #> #   Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":"/index.html","id":"rolling-average","dir":"","previous_headings":"Use > Perform averages","what":"Rolling-average","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"## example of performing 30-s rolling-averages df %>%    interpolate() %>%    perform_average(type = \"rolling\", rolling_window = 30) #> # Metabolic cart: COSMED  #> # Data status: averaged data - 30-s rolling average #> # Time column: t #> # A tibble: 2,130 × 114 #>        t    Rf    VT    VE   VO2  VCO2 O2exp CO2exp `VE/VO2` `VE/VCO2` `VO2/Kg` #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>    <dbl>     <dbl>    <dbl> #>  1  16.5  16.4  1.75  26.5 1033.  852.  271.   80.1     25.7      31.3     12.4 #>  2  17.5  16.6  1.76  27.0 1054.  870.  273.   80.7     25.7      31.3     12.7 #>  3  18.5  16.7  1.78  27.3 1067.  882.  276.   81.6     25.7      31.3     12.9 #>  4  19.5  16.4  1.80  27.4 1071.  887.  280.   82.8     25.7      31.2     12.9 #>  5  20.5  16.2  1.82  27.4 1071.  888.  282.   83.6     25.7      31.1     12.9 #>  6  21.5  16.0  1.82  27.3 1068.  885.  282.   83.8     25.7      31.1     12.9 #>  7  22.5  16.0  1.81  27.1 1062.  880.  280.   83.4     25.7      31.1     12.8 #>  8  23.5  16.0  1.78  26.9 1052.  871.  277.   82.4     25.6      31.0     12.7 #>  9  24.5  16.1  1.77  26.7 1048.  867.  274.   81.8     25.5      31.0     12.6 #> 10  25.5  16.1  1.76  26.6 1050.  868.  273.   81.9     25.4      30.8     12.6 #> # ℹ 2,120 more rows #> # ℹ 103 more variables: R <dbl>, FeO2 <dbl>, FeCO2 <dbl>, HR <dbl>, #> #   `VO2/HR` <dbl>, Load1 <dbl>, Load2 <dbl>, Load3 <dbl>, Phase <dbl>, #> #   FetO2 <dbl>, FetCO2 <dbl>, FiO2 <dbl>, FiCO2 <dbl>, Ti <dbl>, Te <dbl>, #> #   Ttot <dbl>, `Ti/Ttot` <dbl>, IV <dbl>, PetO2 <dbl>, PetCO2 <dbl>, #> #   `P(a-et)CO2` <dbl>, SpO2 <dbl>, `VD(phys)` <dbl>, `VD/VT` <dbl>, #> #   `Env. Temp.` <dbl>, `Analyz. Temp.` <dbl>, `Analyz. Press.` <dbl>, …"},{"path":"/index.html","id":"perform-vo2-kinetics-analysis","dir":"","previous_headings":"Use","what":"Perform VO2 kinetics analysis","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"results_kinetics <- vo2_kinetics(   .data = df,   intensity_domain = \"moderate\",   vo2_column = \"VO2\",   protocol_n_transitions = 3,   protocol_baseline_length = 360,   protocol_transition_length = 360,   cleaning_level = 0.95,   cleaning_baseline_fit = c(\"linear\", \"exponential\", \"exponential\"),   fit_level = 0.95,   fit_bin_average = 5,   fit_phase_1_length = 20,   fit_baseline_length = 120,   fit_transition_length = 240,   verbose = TRUE ) #> ──────────────────────────  * V̇O₂ kinetics analysis *  ───────────────────────── #> ✔ Detecting outliers #> • 14 outliers found in transition 1 #> • 15 outliers found in transition 2 #> • 13 outliers found in transition 3 #> ✔ Processing data... #> ✔       └─ Removing outliers #> ✔       └─ Interpolating each transition #> ✔       └─ Ensemble-averaging transitions #> ✔       └─ Performing 5-s bin averages #> ✔ Fitting data... #> ✔       └─ Fitting baseline #> ✔       └─ Fitting transition #> ✔       └─ Calculating residuals #> ✔       └─ Preparing plots #> ──────────────────────────────────  * DONE *  ──────────────────────────────────"},{"path":"/index.html","id":"perform-vo2max-analysis","dir":"","previous_headings":"Use","what":"Perform VO2max analysis","title":"Tools for Manipulating Gas Exchange Data","text":"","code":"df_incremental <- read_data(path = system.file(\"ramp_cosmed.xlsx\", package = \"whippr\"), metabolic_cart = \"cosmed\")  vo2_max(   .data = df_incremental, ## data from `read_data()`   vo2_column = \"VO2\",   vo2_relative_column = \"VO2/Kg\",   heart_rate_column = \"HR\",   rer_column = \"R\",   detect_outliers = TRUE,   average_method = \"bin\",   average_length = 30,   plot = TRUE,   verbose = TRUE,   ## arguments for `incremental_normalize()`   incremental_type = \"ramp\",   has_baseline = TRUE,   baseline_length = 240, ## 4-min baseline   work_rate_magic = TRUE, ## produce a work rate column   baseline_intensity = 20, ## baseline was performed at 20 W   ramp_increase = 25, ## 25 W/min ramp   ## arguments for `detect_outliers()`   test_type = \"incremental\",   cleaning_level = 0.95,    method_incremental = \"linear\" ) #> ────────────────────────────  * V̇O₂ max analysis *  ──────────────────────────── #> ✔ Normalizing incremental data... #> ✔ Detecting outliers #> • 2 outlier(s) found in baseline #> • 15 outlier(s) found in ramp #> ✔ Filtering out outliers... #> ✔ Interpolating from breath-by-breath into second-by-second... #> ✔ Performing averages... #> # A tibble: 1 × 6 #>   VO2max_absolute VO2max_relative POpeak HRmax RERmax plot   #>             <dbl>           <dbl>  <int> <dbl>  <dbl> <list> #> 1           3524.            46.0    303   193   1.13 <gg>"},{"path":"/index.html","id":"metabolic-carts-currently-supported","dir":"","previous_headings":"","what":"Metabolic carts currently supported","title":"Tools for Manipulating Gas Exchange Data","text":"COSMED CORTEX NSpire Parvo Medics Geratherm Respiratory CardioCoach","code":""},{"path":"/index.html","id":"online-app","dir":"","previous_headings":"","what":"Online app","title":"Tools for Manipulating Gas Exchange Data","text":"like perform VO2 kinetics analyses don’t know R? problem! can use online app: VO2 Kinetics App","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Tools for Manipulating Gas Exchange Data","text":"Please note project released Contributor Code Conduct. participating project agree abide terms. Icons made monkik www.flaticon.com","code":""},{"path":"/reference/detect_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect outliers — detect_outliers","title":"Detect outliers — detect_outliers","text":"detects outliers based prediction bands given level confidence provided.","code":""},{"path":"/reference/detect_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect outliers — detect_outliers","text":"","code":"detect_outliers(   .data,   test_type = c(\"incremental\", \"kinetics\"),   vo2_column = \"VO2\",   cleaning_level = 0.95,   cleaning_baseline_fit,   protocol_n_transitions,   protocol_baseline_length,   protocol_transition_length,   method_incremental = c(\"linear\", \"anomaly\"),   verbose = TRUE,   ... )"},{"path":"/reference/detect_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect outliers — detect_outliers","text":".data Data retrieved read_data() kinetics test, data retrieved incremental_normalize() incremental test. test_type test analyzed. Either 'incremental' 'kinetics'. vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default VO2. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated. Default 0.95. cleaning_baseline_fit kinetics test . vector length number protocol_n_transitions, indicating kind fit perform baseline. Vector accepts characters either 'linear' 'exponential'. protocol_n_transitions kinetics test . Number transitions performed. protocol_baseline_length kinetics test . length baseline (seconds). protocol_transition_length kinetics test . length transition (seconds). method_incremental method used detecting outliers incremental test. Either 'linear' 'anomaly'. See Details. verbose boolean indicating whether messages printed console. Default TRUE. ... Additional arguments. Currently ignored.","code":""},{"path":"/reference/detect_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect outliers — detect_outliers","text":"tibble","code":""},{"path":"/reference/detect_outliers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect outliers — detect_outliers","text":"TODO","code":""},{"path":"/reference/detect_outliers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect outliers — detect_outliers","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"example_cosmed.xlsx\", package = \"whippr\")  ## read data df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  ## detect outliers data_outliers <- detect_outliers(   .data = df,   test_type = \"kinetics\",   vo2_column = \"VO2\",   cleaning_level = 0.95,   cleaning_baseline_fit = c(\"linear\", \"exponential\", \"exponential\"),   protocol_n_transitions = 3,   protocol_baseline_length = 360,   protocol_transition_length = 360,   verbose = TRUE  )  ## get file path from example data path_example_ramp <- system.file(\"ramp_cosmed.xlsx\", package = \"whippr\")  ## read data from ramp test df_ramp <- read_data(path = path_example_ramp, metabolic_cart = \"cosmed\")  ## normalize incremental test data ramp_normalized <- df_ramp %>%  incremental_normalize(    .data = .,    incremental_type = \"ramp\",    has_baseline = TRUE,    baseline_length = 240,    work_rate_magic = TRUE,    baseline_intensity = 20,    ramp_increase = 25  )  ## detect ramp outliers data_ramp_outliers <- detect_outliers(   .data = ramp_normalized,   test_type = \"incremental\",   vo2_column = \"VO2\",   cleaning_level = 0.95,   method_incremental = \"linear\",   verbose = TRUE  ) }"},{"path":"/reference/get_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Get residuals — get_residuals","title":"Get residuals — get_residuals","text":"Computes residuals VO2 kinetics model.","code":""},{"path":"/reference/get_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get residuals — get_residuals","text":"","code":"get_residuals(.model)"},{"path":"/reference/get_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get residuals — get_residuals","text":".model model class nls.","code":""},{"path":"/reference/get_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get residuals — get_residuals","text":"tibble containing data passed augment, additional columns: .fitted predicted response observation. .resid residual particular point. standardized_residuals Standardized residuals. sqrt_abs_standardized_residuals sqrt absolute value standardized residuals. lag_residuals lag .resid column plotting auto-correlation.","code":""},{"path":"/reference/incremental_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize incremental test data — incremental_normalize","title":"Normalize incremental test data — incremental_normalize","text":"Detect protocol phases (baseline, ramp, steps), normalize work rate, time-align baseline phase (baseline time becomes negative).","code":""},{"path":"/reference/incremental_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize incremental test data — incremental_normalize","text":"","code":"incremental_normalize(   .data,   incremental_type = c(\"ramp\", \"step\"),   has_baseline = TRUE,   baseline_length = NULL,   work_rate_magic = FALSE,   baseline_intensity = NULL,   ramp_increase = NULL,   step_start = NULL,   step_increase = NULL,   step_length = NULL,   ... )"},{"path":"/reference/incremental_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize incremental test data — incremental_normalize","text":".data Data retrieved read_data(). incremental_type type incremental test performed. Either \"ramp\" \"step\". has_baseline boolean indicate whether data contains baseline phase. used incremental test . Default TRUE. baseline_length baseline length (seconds) performed. work_rate_magic boolean indicating whether perform work rate calculations. set TRUE, calculate work rate throughout ramp step test. case step test, also perform linear transformation work rate. set TRUE, arguments given. Default FALSE. baseline_intensity numeric atomic vector indicating work rate baseline. baseline performed rest, indicate 0. ramp_increase numeric atomic vector indicating ramp increase watts per minute (W/min). example, ramp 30 W/min, pass number 30 argument. step_start case baseline performed rest, can set parameter intensity step test started. step_increase numeric atomic vector indicating step increase, watts. example, step increase 25 W step, pass number 25 argument. step_length numeric atomic vector indicating length (seconds) step step incremental test. ... Additional arguments. Currently ignored.","code":""},{"path":"/reference/incremental_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize incremental test data — incremental_normalize","text":"tibble","code":""},{"path":"/reference/incremental_normalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize incremental test data — incremental_normalize","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"ramp_cosmed.xlsx\", package = \"whippr\")  ## read data from ramp test df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  ## normalize incremental test data ramp_normalized <- df %>%  incremental_normalize(    .data = .,    incremental_type = \"ramp\",    has_baseline = TRUE,    baseline_length = 240,    work_rate_magic = TRUE,    baseline_intensity = 20,    ramp_increase = 25  )  ## get file path from example data path_example_step <- system.file(\"step_cortex.xlsx\", package = \"whippr\")  ## read data from step test df_step <- read_data(path = path_example_step, metabolic_cart = \"cortex\")  ## normalize incremental test data step_normalized <- df_step %>%  incremental_normalize(    .data = .,    incremental_type = \"step\",    has_baseline = TRUE,    baseline_length = 120,    work_rate_magic = TRUE,    baseline_intensity = 0,    step_start = 50,    step_increase = 25,    step_length = 180  ) }"},{"path":"/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate data from breath-by-breath into second-by-second — interpolate","title":"Interpolate data from breath-by-breath into second-by-second — interpolate","text":"function interpolates data based time column. takes breath--breath data transforms second--second.","code":""},{"path":"/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate data from breath-by-breath into second-by-second — interpolate","text":"","code":"interpolate(.data)"},{"path":"/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate data from breath-by-breath into second-by-second — interpolate","text":".data Data retrieved read_data().","code":""},{"path":"/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate data from breath-by-breath into second-by-second — interpolate","text":"tibble","code":""},{"path":"/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate data from breath-by-breath into second-by-second — interpolate","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"example_cosmed.xlsx\", package = \"whippr\")  ## read data df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  df %>%  interpolate() }"},{"path":"/reference/model_diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"Model diagnostics — model_diagnostics","title":"Model diagnostics — model_diagnostics","text":"Plots different model diagnostics checking model performance.","code":""},{"path":"/reference/model_diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model diagnostics — model_diagnostics","text":"","code":"model_diagnostics(.residuals_tbl)"},{"path":"/reference/model_diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model diagnostics — model_diagnostics","text":".residuals_tbl data retrived get_residuals().","code":""},{"path":"/reference/model_diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model diagnostics — model_diagnostics","text":"patchwork object","code":""},{"path":"/reference/new_whippr_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new tibble with metadata — new_whippr_tibble","title":"Construct a new tibble with metadata — new_whippr_tibble","text":"Construct new tibble metadata","code":""},{"path":"/reference/new_whippr_tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new tibble with metadata — new_whippr_tibble","text":"","code":"new_whippr_tibble(.data, metadata)"},{"path":"/reference/new_whippr_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new tibble with metadata — new_whippr_tibble","text":".data data frame metadata Metadata passed along data","code":""},{"path":"/reference/new_whippr_tibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new tibble with metadata — new_whippr_tibble","text":"tibble","code":""},{"path":"/reference/normalize_first_breath.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize first breath — normalize_first_breath","title":"Normalize first breath — normalize_first_breath","text":"needed specially data gets filtered. example, data file contain baseline transitions performed, normalize time column. function make sure case first breath start zero, create zero data point, duplicating first breath. make sure data get shifted (misalignment).","code":""},{"path":"/reference/normalize_first_breath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize first breath — normalize_first_breath","text":"","code":"normalize_first_breath(.data)"},{"path":"/reference/normalize_first_breath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize first breath — normalize_first_breath","text":".data Breath--breath data.","code":""},{"path":"/reference/normalize_first_breath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize first breath — normalize_first_breath","text":"tibble","code":""},{"path":"/reference/normalize_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize time column — normalize_time","title":"Normalize time column — normalize_time","text":"Normalizes time column baseline phase negative time values. Point zero represent start transition phase.","code":""},{"path":"/reference/normalize_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize time column — normalize_time","text":"","code":"normalize_time(.data, protocol_baseline_length)"},{"path":"/reference/normalize_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize time column — normalize_time","text":".data Breath--breath data. protocol_baseline_length length baseline (seconds).","code":""},{"path":"/reference/normalize_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize time column — normalize_time","text":"tibble","code":""},{"path":"/reference/normalize_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize transitions — normalize_transitions","title":"Normalize transitions — normalize_transitions","text":"Recognizes normalizes time column transition. also label transitions : 'baseline' 'transition'.","code":""},{"path":"/reference/normalize_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize transitions — normalize_transitions","text":"","code":"normalize_transitions(   .data,   protocol_n_transitions,   protocol_baseline_length,   protocol_transition_length )"},{"path":"/reference/normalize_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize transitions — normalize_transitions","text":".data Breath--breath data. protocol_n_transitions Number transitions performed. protocol_baseline_length length baseline (seconds). protocol_transition_length length transition (seconds).","code":""},{"path":"/reference/normalize_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize transitions — normalize_transitions","text":"tibble","code":""},{"path":"/reference/outliers_anomaly.html","id":null,"dir":"Reference","previous_headings":"","what":"Anomaly method for detecting outliers from an incremental test — outliers_anomaly","title":"Anomaly method for detecting outliers from an incremental test — outliers_anomaly","text":"Function internal use . exported.","code":""},{"path":"/reference/outliers_anomaly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anomaly method for detecting outliers from an incremental test — outliers_anomaly","text":"","code":"outliers_anomaly(.data, time_column, vo2_column, cleaning_level)"},{"path":"/reference/outliers_anomaly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anomaly method for detecting outliers from an incremental test — outliers_anomaly","text":".data data retrieved incremental_normalize(). time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify . vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated.","code":""},{"path":"/reference/outliers_anomaly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anomaly method for detecting outliers from an incremental test — outliers_anomaly","text":"tibble","code":""},{"path":"/reference/outliers_linear.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear method for detecting outliers from an incremental test — outliers_linear","title":"Linear method for detecting outliers from an incremental test — outliers_linear","text":"Function internal use . exported.","code":""},{"path":"/reference/outliers_linear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear method for detecting outliers from an incremental test — outliers_linear","text":"","code":"outliers_linear(.data, time_column, vo2_column, cleaning_level)"},{"path":"/reference/outliers_linear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear method for detecting outliers from an incremental test — outliers_linear","text":".data data retrieved incremental_normalize(). time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify . vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated.","code":""},{"path":"/reference/outliers_linear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear method for detecting outliers from an incremental test — outliers_linear","text":"tibble","code":""},{"path":"/reference/perform_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform average on second-by-second data — perform_average","title":"Perform average on second-by-second data — perform_average","text":"function performs either bin- rolling-average interpolated data. must specify type average continuing.","code":""},{"path":"/reference/perform_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform average on second-by-second data — perform_average","text":"","code":"perform_average(   .data,   type = c(\"bin\", \"rolling\", \"ensemble\"),   bins = 30,   rolling_window = 30 )"},{"path":"/reference/perform_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform average on second-by-second data — perform_average","text":".data second--second data retrieved interpolate(). type type average perform. Either bin, rolling, ensemble. bins bin-average chosen, can specify size bin-average, seconds. Default 30-s bin-average. rolling_window rolling-average chosen, can specify rolling-average window, seconds. Default 30-s rolling-average.","code":""},{"path":"/reference/perform_average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform average on second-by-second data — perform_average","text":"tibble","code":""},{"path":"/reference/perform_average.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform average on second-by-second data — perform_average","text":"Ensemble average used VO2 kinetics analysis, series transitions baseline moderate/heavy/severe intensity-domain ensembled averaged single 'bout' data processing.","code":""},{"path":"/reference/perform_average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform average on second-by-second data — perform_average","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"example_cosmed.xlsx\", package = \"whippr\")  ## read data df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  ## interpolate and perform 30-s bin-average df %>%  interpolate() %>%  perform_average(type = \"bin\", bins = 30)  ## interpolate and perform 30-s rolling-average df %>%  interpolate() %>%  perform_average(type = \"rolling\", rolling_window = 30) }"},{"path":"/reference/perform_kinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform VO2 kinetics fitting — perform_kinetics","title":"Perform VO2 kinetics fitting — perform_kinetics","text":"Performs fitting process VO2 kinetics analysis. point, data already cleaned (outliers removed) processed (interpolated, time-aligned, ensembled-averaged, bin-averaged).","code":""},{"path":"/reference/perform_kinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform VO2 kinetics fitting — perform_kinetics","text":"","code":"perform_kinetics(   .data_processed,   intensity_domain = c(\"moderate\", \"heavy\", \"severe\"),   fit_level = 0.95,   fit_phase_1_length,   fit_baseline_length,   fit_transition_length,   verbose = TRUE,   ... )"},{"path":"/reference/perform_kinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform VO2 kinetics fitting — perform_kinetics","text":".data_processed data retrieved process_data(). intensity_domain exercise-intensity domain test performed. Either moderate, heavy, severe. fit_level numeric scalar 0 1 giving confidence level parameter estimates final VO2 kinetics fit. Default 0.95. fit_phase_1_length length phase wish exclude final exponential fit, seconds. See  VO2 kinetics section ?vo2_kinetics details. fit_baseline_length length baseline perform final linear fit, seconds. See VO2 kinetics section ?vo2_kinetics details. fit_transition_length length transition perform final exponential fit, seconds. See VO2 kinetics section ?vo2_kinetics details. verbose boolean indicating whether messages printed console. Default TRUE. ... Additional arguments fitting VO2 kinetics heavy- severe-intensity domains. Arguments may following: TODO","code":""},{"path":"/reference/perform_kinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform VO2 kinetics fitting — perform_kinetics","text":"tibble containing one row nested columns: data_fitted data containing time VO2 columns, well fitted data residuals data point. model nls object. model used VO2 kinetics fitting. model_summary tidied summary model. model_residuals residuals model. plot_model final plot fitted model. plot_residuals residuals plot model diagnostics.","code":""},{"path":"/reference/perform_kinetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform VO2 kinetics fitting — perform_kinetics","text":"See ?vo2_kinetics details.","code":""},{"path":"/reference/perform_max.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform VO2max calculation — perform_max","title":"Perform VO2max calculation — perform_max","text":"performs calculation VO2max, HRmax, maximal RER. Additionally, detects whether plateau can identified data.","code":""},{"path":"/reference/perform_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform VO2max calculation — perform_max","text":"","code":"perform_max(   .data,   vo2_column = \"VO2\",   vo2_relative_column = NULL,   heart_rate_column = NULL,   rer_column = NULL,   average_method = c(\"bin\", \"rolling\"),   average_length = 30,   plot = TRUE,   verbose = TRUE )"},{"path":"/reference/perform_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform VO2max calculation — perform_max","text":".data data retrieved either incremental_normalize() detect_outliers(). vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default \"VO2\". vo2_relative_column name (quoted) column containing relative body weight oxygen uptake (VO2) data. Default NULL. heart_rate_column name (quoted) column containing heart rate (HR) data. Default NULL. NULL, parameter calculated. rer_column name (quoted) column containing respiratory exchange ratio (RER) data. Default NULL. NULL, parameter calculated. average_method average method used VO2max calculation. One bin rolling. average_length length, seconds, average used. example, average_method = bin, average_length = 30, perform 30-s bin-average. plot boolean indicating whether produce plot summary results. Default TRUE. verbose boolean indicating whether messages printed console. Default TRUE.","code":""},{"path":"/reference/perform_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform VO2max calculation — perform_max","text":"tibble","code":""},{"path":"/reference/perform_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform VO2max calculation — perform_max","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"ramp_cosmed.xlsx\", package = \"whippr\")  ## read data from ramp test df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  ## normalize incremental test data ramp_normalized <- df %>%  incremental_normalize(    .data = .,    incremental_type = \"ramp\",    has_baseline = TRUE,    baseline_length = 240,    work_rate_magic = TRUE,    baseline_intensity = 20,    ramp_increase = 25  )  ## detect outliers data_ramp_outliers <- detect_outliers(  .data = ramp_normalized,  test_type = \"incremental\",  vo2_column = \"VO2\",  cleaning_level = 0.95,  method_incremental = \"linear\",  verbose = TRUE )  ## analyze VO2max perform_max(  .data = data_ramp_outliers,  vo2_column = \"VO2\",  vo2_relative_column = \"VO2/Kg\",  heart_rate_column = \"HR\",  rer_column = \"R\",  average_method = \"bin\",  average_length = 30,  plot = TRUE,  verbose = FALSE ) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/plot_incremental.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot incremental test work rate — plot_incremental","title":"Plot incremental test work rate — plot_incremental","text":"Visualize done process deriving work rate incremental test protocol","code":""},{"path":"/reference/plot_incremental.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot incremental test work rate — plot_incremental","text":"","code":"plot_incremental(.data)"},{"path":"/reference/plot_incremental.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot incremental test work rate — plot_incremental","text":".data data retrieved incremental_normalize().","code":""},{"path":"/reference/plot_incremental.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot incremental test work rate — plot_incremental","text":"ggplot object","code":""},{"path":"/reference/plot_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot outliers — plot_outliers","title":"Plot outliers — plot_outliers","text":"Plot outliers","code":""},{"path":"/reference/plot_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot outliers — plot_outliers","text":"","code":"plot_outliers(.data)"},{"path":"/reference/plot_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot outliers — plot_outliers","text":".data data retrieved detect_outliers().","code":""},{"path":"/reference/plot_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot outliers — plot_outliers","text":"patchwork object","code":""},{"path":"/reference/predict_bands.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract confidence and prediction bands — predict_bands","title":"Extract confidence and prediction bands — predict_bands","text":"extracts confidence prediction bands nls model. used data cleaning.","code":""},{"path":"/reference/predict_bands.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract confidence and prediction bands — predict_bands","text":"","code":"predict_bands(   .data,   time_column = \"t\",   vo2_column = \"VO2\",   cleaning_level = 0.95,   cleaning_baseline_fit = c(\"linear\", \"exponential\") )"},{"path":"/reference/predict_bands.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract confidence and prediction bands — predict_bands","text":".data nornalized data retrieved normalize_transitions(). time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify .  Default \"t\". vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default 'VO2'. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated. cleaning_baseline_fit character indicating kind fit perform baseline. Either 'linear' 'exponential'.","code":""},{"path":"/reference/predict_bands.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract confidence and prediction bands — predict_bands","text":"tibble containing following columns: x provided time data. y provided VO2 data. .fitted predicted response observation. .resid residual particular point. lwr_conf Lower limit confidence band. upr_conf Upper limit confidence band. lwr_pred Lower limit prediction band. upr_pred Upper limit prediction band.","code":""},{"path":"/reference/predict_bands_baseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract confidence and prediction bands for the baseline phase — predict_bands_baseline","title":"Extract confidence and prediction bands for the baseline phase — predict_bands_baseline","text":"Extract confidence prediction bands baseline phase","code":""},{"path":"/reference/predict_bands_baseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract confidence and prediction bands for the baseline phase — predict_bands_baseline","text":"","code":"predict_bands_baseline(   .data,   time_column,   vo2_column,   cleaning_level,   cleaning_baseline_fit )"},{"path":"/reference/predict_bands_baseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract confidence and prediction bands for the baseline phase — predict_bands_baseline","text":".data nornalized data retrieved normalize_transitions(). data filtered 'baseline' phase passing function. time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify .  Default \"t\". vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default 'VO2'. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated. cleaning_baseline_fit character indicating kind fit perform baseline. Either 'linear' 'exponential'.","code":""},{"path":"/reference/predict_bands_baseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract confidence and prediction bands for the baseline phase — predict_bands_baseline","text":"tibble containing following columns: x provided time data. y provided VO2 data. .fitted predicted response observation. .resid residual particular point. lwr_conf Lower limit confidence band. upr_conf Upper limit confidence band. lwr_pred Lower limit prediction band. upr_pred Upper limit prediction band.","code":""},{"path":"/reference/predict_bands_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract confidence and prediction bands for the transition phase — predict_bands_transition","title":"Extract confidence and prediction bands for the transition phase — predict_bands_transition","text":"Extract confidence prediction bands transition phase","code":""},{"path":"/reference/predict_bands_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract confidence and prediction bands for the transition phase — predict_bands_transition","text":"","code":"predict_bands_transition(   .data,   time_column,   vo2_column,   cleaning_level,   cleaning_model )"},{"path":"/reference/predict_bands_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract confidence and prediction bands for the transition phase — predict_bands_transition","text":".data nornalized data retrieved normalize_transitions(). data filtered 'transition' phase passing function. time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify .  Default \"t\". vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default 'VO2'. cleaning_level numeric scalar 0 1 giving confidence level intervals calculated. cleaning_model nls model retrieve bands .","code":""},{"path":"/reference/predict_bands_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract confidence and prediction bands for the transition phase — predict_bands_transition","text":"tibble containing following columns: x provided time data. y provided VO2 data. .fitted predicted response observation. .resid residual particular point. lwr_conf Lower limit confidence band. upr_conf Upper limit confidence band. lwr_pred Lower limit prediction band. upr_pred Upper limit prediction band.","code":""},{"path":"/reference/print.whippr.html","id":null,"dir":"Reference","previous_headings":"","what":"Whippr print method — print.whippr","title":"Whippr print method — print.whippr","text":"Whippr print method","code":""},{"path":"/reference/print.whippr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Whippr print method — print.whippr","text":"","code":"# S3 method for whippr print(x, ...)"},{"path":"/reference/print.whippr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whippr print method — print.whippr","text":"x tibble class 'whippr' ... Extra arguments, used.","code":""},{"path":"/reference/process_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process data for VO2 kinetics fitting — process_data","title":"Process data for VO2 kinetics fitting — process_data","text":"removes outliers detected detect_outliers(), interpolates transition, ensemble-averages transitions one, performs bin-average, normalizes time column (time zero indicate end baseline start transition phase).","code":""},{"path":"/reference/process_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process data for VO2 kinetics fitting — process_data","text":"","code":"process_data(.data_outliers, protocol_baseline_length, fit_bin_average)"},{"path":"/reference/process_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process data for VO2 kinetics fitting — process_data","text":".data_outliers data retrived detect_outliers(). protocol_baseline_length length baseline (seconds). fit_bin_average bin average performed final fit.","code":""},{"path":"/reference/process_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process data for VO2 kinetics fitting — process_data","text":"tibble time-aligned, ensembled-averaged, bin-averaged data.","code":""},{"path":"/reference/process_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process data for VO2 kinetics fitting — process_data","text":"TODO","code":""},{"path":"/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data from metabolic cart — read_data","title":"Read data from metabolic cart — read_data","text":"reads raw data exported metabolic cart.","code":""},{"path":"/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data from metabolic cart — read_data","text":"","code":"read_data(   path,   metabolic_cart = c(\"cosmed\", \"cortex\", \"nspire\", \"parvo\", \"geratherm\", \"cardiocoach\",     \"custom\"),   time_column = \"t\",   work_rate_column = NULL )"},{"path":"/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data from metabolic cart — read_data","text":"path Path read file . metabolic_cart Metabolic cart used data collection. Currently, 'cosmed', 'cortex', 'nspire', 'parvo', 'geratherm', 'cardiocoach' supported. Additionaly, option called 'custom' supports files metabolic cart-specific format. time_column name (quoted) column containing time. Depending language system, column might \"t\". Therefore, may specify .  Default \"t\". work_rate_column Default NULL. case work rate column coerced character column can define name column data file. happens beginning test system may input character like \"-\" indicate work rate. Therefore going get recognized numeric column. work rate column called WR, example, just pass \"WR\" argument.","code":""},{"path":"/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data from metabolic cart — read_data","text":"tibble","code":""},{"path":"/reference/remove_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"Removes rows /columns data.frame matrix composed entirely NA values.","code":""},{"path":"/reference/remove_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"","code":"remove_empty(dat, which = c(\"rows\", \"cols\"), cutoff = 1)"},{"path":"/reference/remove_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"dat input data.frame matrix. one \"rows\", \"cols\", c(\"rows\", \"cols\").  value provided, defaults removing empty rows empty columns, declaring behavior printed message. cutoff fraction (>0 <=1) rows columns must empty removed? quiet messages suppressed (TRUE) printed (FALSE) indicating summary empty columns rows removed?","code":""},{"path":"/reference/remove_empty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove empty rows and/or columns from a data.frame or matrix. — remove_empty","text":"Returns object without missing rows columns.","code":""},{"path":"/reference/run_manual_cleaner.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual data cleaner — run_manual_cleaner","title":"Manual data cleaner — run_manual_cleaner","text":"Usually manual data cleaning avoided. However, sometimes gas exchange data need delete clear \"bad breaths\" (noise). situations may use function. Although encouraged use detect_outliers() function, may use function risk. function can also used clean kind data, like heart rate data.","code":""},{"path":"/reference/run_manual_cleaner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual data cleaner — run_manual_cleaner","text":"","code":"run_manual_cleaner(.data, width = 1200, height = 900)"},{"path":"/reference/run_manual_cleaner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual data cleaner — run_manual_cleaner","text":".data data manually cleaned. first column always treated x-axis. width width, pixels, window. height height, pixels, window.","code":""},{"path":"/reference/run_manual_cleaner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual data cleaner — run_manual_cleaner","text":"code reproduce manual data cleaning.","code":""},{"path":"/reference/theme_whippr.html","id":null,"dir":"Reference","previous_headings":"","what":"Whippr ggplot2 theme — theme_whippr","title":"Whippr ggplot2 theme — theme_whippr","text":"theme inspired plots Acta Physiologica Journal","code":""},{"path":"/reference/theme_whippr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Whippr ggplot2 theme — theme_whippr","text":"","code":"theme_whippr(base_size = 14, base_family = \"sans\")"},{"path":"/reference/theme_whippr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Whippr ggplot2 theme — theme_whippr","text":"base_size base font size, given pts. Default 14. base_family base font family. Default sans.","code":""},{"path":"/reference/theme_whippr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Whippr ggplot2 theme — theme_whippr","text":"ggplot2 object","code":""},{"path":"/reference/undoHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Undo/Redo History Buttons — undoHistory","title":"Undo/Redo History Buttons — undoHistory","text":"simple Shiny module undo/redo history. Shiny module accepts arbitrary reactive data value. Changes state reactive value tracked added user's history. user can repeatedly undo redo walk stack. module returns current selected value reactive historical stack, NULL app state changed user. reactive can hold arbitrary data state Shiny app, app developer use returned current value update Shiny apps' inputs UI elements.","code":""},{"path":"/reference/undoHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Undo/Redo History Buttons — undoHistory","text":"","code":"undoHistory(id, value, value_debounce_rate = 500)"},{"path":"/reference/undoHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Undo/Redo History Buttons — undoHistory","text":"id module id value reactive expression values saved user's history. expression can contain arbitrary data structure long returns single value (list). change value stored, module may work well storing large data sets. value_debounce_rate Debounce rate milliseconds value reactive expression. avoid saving spurious changes value, expression debounced. See shiny::debounce() information. class class applied parent button group container holds undo/redo buttons. btn_class classes applied buttons. Use single character vector apply class buttons, character vector length 2 apply individual classes button, (undo/redo respectively). back_text, fwd_text button text back_title, fwd_title button title (shown hover) back_icon, fwd_icon icons used buttons, passed shiny::icon(). Set NULL icon. can also add arbitrary HTML back_text fwd_text inner HTML <button> element.","code":""},{"path":"/reference/undoHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Undo/Redo History Buttons — undoHistory","text":"undoHistory() module returns currently selected history item user moves stack, NULL last update result user input. returned value structure reactive value passed undoHistory().","code":""},{"path":"/reference/vo2_kinetics.html","id":null,"dir":"Reference","previous_headings":"","what":"VO2 kinetics — vo2_kinetics","title":"VO2 kinetics — vo2_kinetics","text":"performs whole process VO2 kinetics data analysis, includes: data cleaning (detect_outliers()); outliers removal, interpolation, ensemble-averaging transitions bin-avering final dataset (process_data()), modelling VO2 kinetics (perform_kinetics()). function general function call separate functions. can also call one separately want.","code":""},{"path":"/reference/vo2_kinetics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VO2 kinetics — vo2_kinetics","text":"","code":"vo2_kinetics(   .data,   intensity_domain = c(\"moderate\", \"heavy\", \"severe\"),   vo2_column = \"VO2\",   protocol_n_transitions,   protocol_baseline_length,   protocol_transition_length,   cleaning_level = 0.95,   cleaning_baseline_fit,   fit_level = 0.95,   fit_bin_average,   fit_phase_1_length,   fit_baseline_length,   fit_transition_length,   verbose = TRUE,   ... )"},{"path":"/reference/vo2_kinetics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VO2 kinetics — vo2_kinetics","text":".data Data retrieved read_data(). intensity_domain exercise-intensity domain test performed. Either moderate, heavy, severe. vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default \"VO2\". protocol_n_transitions Number transitions performed. protocol_baseline_length length baseline (seconds). protocol_transition_length length transition (seconds). cleaning_level numeric scalar 0 1 giving confidence level intervals calculated data cleaning process. Breaths lying outside prediction bands excluded. Default 0.95. cleaning_baseline_fit vector length number protocol_n_transitions, indicating kind fit perform baseline. Either linear exponential. fit_level numeric scalar 0 1 giving confidence level parameter estimates final VO2 kinetics fit. Default 0.95. fit_bin_average bin average performed final fit. fit_phase_1_length length phase wish exclude final exponential fit, seconds. See  VO2 kinetics section details. fit_baseline_length length baseline perform final linear fit, seconds. See VO2 kinetics section details. fit_transition_length length transition perform final exponential fit, seconds. See VO2 kinetics section details. verbose boolean indicating whether messages printed console. Default TRUE. ... Additional arguments passed perform_kinetics() fitting VO2 kinetics heavy- severe-intensity domains. See ?perform_kinetics details.","code":""},{"path":"/reference/vo2_kinetics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VO2 kinetics — vo2_kinetics","text":"tibble containing one row nested columns: data_outliers raw data containing additional columns identify breaths outliers. plot_outliers patchwork object display outliers every transition. data_processed processed data (time-aligned, ensembled-averaged, bin-averaged). data_fitted data containing time VO2 columns, well fitted data residuals data point. model nls object. model used VO2 kinetics fitting. model_summary tidied summary model. model_residuals residuals model. plot_model final plot fitted model. plot_residuals residuals plot model diagnostics.","code":""},{"path":"/reference/vo2_kinetics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"VO2 kinetics — vo2_kinetics","text":"function wrapper smaller functions important arguments: protocol_ = sets arguments related protocol used. cleaning_ = sets arguments related data cleaning. fit_ = sets arguments related VO2 kinetics fitting. function works like following sequence: vo2_kinetics( ): detect_outliers( ) = separates data number transitions indicated, fits baseline transition phase indiviudally, retrieving predictions bands level indicated. recognizes breaths lying outside prediciton bands flag outliers. plot_outliers( ) = plots transition identifying outliers. process_data( ) = removes outliers detected detect_outliers(), interpolates transition, ensemble-averages transitions one, performs bin-average, normalizes time column (time zero indicate end baseline start transition phase). perform_kinetics( ) = performs VO2 kinetics fitting based fit_ parameters given. also calculates residuals, plots final fit well residuals model diagnostics.","code":""},{"path":"/reference/vo2_kinetics.html","id":"vo-kinetics","dir":"Reference","previous_headings":"","what":"VO2 kinetics","title":"VO2 kinetics — vo2_kinetics","text":"VO2 kinetics, described rate adjustment oxidative energy system instantaneous increase energy demand, exponential nature, described oxygen uptake (VO2) time-constant (\\(\\tau\\)VO2) (Murias, Spencer Paterson (2014); Poole Jones (2011)). VO2 kinetics analysis provides understanding mechanisms regulate rate oxidative phosphorylation adapts step changes exercise intensities ATP requirement. usually accomplished performing step transitions baseline intensity higher work rate either moderate-, heavy-, severe-intensity domain (Murias et al., 2011). Three distinct phases may observed VO2 response -transient exercise: Phase : also termed cardiodynamic phase, represents circulatory transit delay VO2 response result increase pulmonary blood flow reflect increase oxygen extraction active muscles. time-window Phase determined fit_phase_1_length argument, internally passed perform_kinetics() function. Phase II: also termed primary component, represents exponential increase VO2 related continued increase pulmonary muscle blood flow. Phase II described time-constant parameter (\\(\\tau\\)) mono-exponential model (see ), defined duration time (seconds) VO2 response increase 63% required steady-state. Phase III: represents steady-state phase VO2 response moderate-intensity exercise.","code":""},{"path":"/reference/vo2_kinetics.html","id":"moderate-intensity-domain","dir":"Reference","previous_headings":"","what":"Moderate-intensity domain","title":"VO2 kinetics — vo2_kinetics","text":"-transient response baseline transition within moderate-intensity domain analyzed using mono-exponential model: $$VO_{2\\left(t\\right)}=baseline+amplitude\\cdot\\left(1-e^{^{-\\frac{\\left(t-TD\\right)}{tau}}}\\right)$$ : VO2(t) = oxygen uptake given time. baseline = oxygen uptake associated baseline phase. amplitude = steady-state increase increase oxygen uptake baseline. TD = time delay. \\(\\tau\\) = time constant defined duration time oxygen uptake increase 63% steady-state increase. baseline value mono-exponential model fixed value pre-determined mean VO2 response (.e., linear model slope set zero) baseline phase. time window baseline period determined fit_baseline_length argument, internally passed perform_kinetics() function. Diverse exercise protocols exist determine VO2 kinetics moderate-intensity domain. Usually, protocol consists multiple transitions (typically 3 4) baseline exercise-intensity exercise-intensity gas exchange threshold (typically power output associated 90% gas exchange threshold). Bbaseline transition phases usually performed 6 minutes . reason 6 minutes done phase give enough time reach steady-state response: example, multiple time-constant (\\(\\tau\\)), VO2 increases 63% difference previous \\(\\tau\\) required steady-state. means: 1 \\(\\tau\\) = 63% \\(\\Delta\\). 2 \\(\\tau\\) = 86% \\(\\Delta\\) [100% - 63% = 37%; (37% x 63%) + 63% = 86%]. 3 \\(\\tau\\) = 95% \\(\\Delta\\) [100% - 86% = 14%; (14% x 63%) + 86% = 95%]. 4 \\(\\tau\\) = 98% \\(\\Delta\\) [100% - 95% = 5%; (5% x 63%) + 95% = 98%]. practical terms, imagine given participant \\(\\tau\\) = 60 seconds. means person need 240 seconds (4 x 60) reach steady-state (98% response) moderate-intensity domain. leave 120 seconds (2 minutes) transition, protocol performing 6-min transitions makes sure enough time given. Now imagine another person \\(\\tau\\) = 20 seconds. means person need 80 seconds (4 x 20) reach steady-state (98% response) moderate-intensity domain. Given enough time reach VO2 steady-state response 6 minutes transition, means final fit (transitions cleaned, ensembled-averaged, bin-averaged) need include whole 6 minutes transition. strategy avoids superfluous sections steady‐state data, thus maximizing quality fit exercise ‐transient (Bell et al., 2001). may specified fit_transition_length argument, internally passed perform_kinetics() function. bin-averages final fit, usually data averaged 5-s 10-s bins, 5-s common (Keir et al., 2014). may specified fit_bin_average argument, internally passed process_data() function.","code":""},{"path":"/reference/vo2_kinetics.html","id":"heavy-and-severe-intensity-domains","dir":"Reference","previous_headings":"","what":"Heavy- and severe-intensity domains","title":"VO2 kinetics — vo2_kinetics","text":"TODO","code":""},{"path":"/reference/vo2_kinetics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"VO2 kinetics — vo2_kinetics","text":"Bell, C., Paterson, D. H., Kowalchuk, J. M., Padilla, J., & Cunningham, D. . (2001). comparison modelling techniques used characterise oxygen uptake kinetics -transient exercise. Experimental Physiology, 86(5), 667-676. Keir, D. ., Murias, J. M., Paterson, D. H., & Kowalchuk, J. M. (2014). Breath‐‐breath pulmonary O2 uptake kinetics: effect data processing confidence estimating model parameters. Experimental physiology, 99(11), 1511-1522. Murias, J. M., Spencer, M. D., & Paterson, D. H. (2014). critical role O2 provision dynamic adjustment oxidative phosphorylation. Exercise sport sciences reviews, 42(1), 4-11. Murias, J. M., Spencer, M. D., Kowalchuk, J. M., & Paterson, D. H. (2011). Influence phase duration phase II VO2 kinetics parameter estimates older young adults. American Journal Physiology-regulatory, integrative comparative physiology, 301(1), R218-R224. Poole, D. C., & Jones, . M. (2011). Oxygen uptake kinetics. Comprehensive Physiology, 2(2), 933-996.","code":""},{"path":"/reference/vo2_kinetics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"VO2 kinetics — vo2_kinetics","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"example_cosmed.xlsx\", package = \"whippr\")  ## read data df <- read_data(path = path_example, metabolic_cart = \"cosmed\", time_column = \"t\")  ## VO2 kinetics analysis results_kinetics <- vo2_kinetics(   .data = df,   intensity_domain = \"moderate\",   vo2_column = \"VO2\",   protocol_n_transitions = 3,   protocol_baseline_length = 360,   protocol_transition_length = 360,   cleaning_level = 0.95,   cleaning_baseline_fit = c(\"linear\", \"exponential\", \"exponential\"),   fit_level = 0.95,   fit_bin_average = 5,   fit_phase_1_length = 20,   fit_baseline_length = 120,   fit_transition_length = 240,   verbose = TRUE ) }"},{"path":"/reference/vo2_max.html","id":null,"dir":"Reference","previous_headings":"","what":"VO2max — vo2_max","title":"VO2max — vo2_max","text":"performs whole process VO2max data analysis, includes: data standardization normalization according incremental protocol (incremental_normalize()), 'bad breaths' detection (detect_outliers()), mean response time calculation (incremental_mrt()) (currently ignored), maximal values calculation (VO2, PO, HR, RER) (perform_max()).","code":""},{"path":"/reference/vo2_max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"VO2max — vo2_max","text":"","code":"vo2_max(   .data,   vo2_column = \"VO2\",   vo2_relative_column = NULL,   heart_rate_column = NULL,   rer_column = NULL,   detect_outliers = TRUE,   average_method = c(\"bin\", \"rolling\"),   average_length = 30,   mrt,   plot = TRUE,   verbose = TRUE,   ... )"},{"path":"/reference/vo2_max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"VO2max — vo2_max","text":".data Data retrieved read_data(). vo2_column name (quoted) column containing absolute oxygen uptake (VO2) data. Default \"VO2\". vo2_relative_column name (quoted) column containing relative body weight oxygen uptake (VO2) data. Default NULL. heart_rate_column name (quoted) column containing heart rate (HR) data. Default NULL. NULL, parameter calculated. rer_column name (quoted) column containing respiratory exchange ratio (RER) data. Default NULL. NULL, parameter calculated. detect_outliers boolean indicating whether detect outliers. Default TRUE. average_method average method used VO2max calculation. One bin rolling. average_length length, seconds, average used. example, average_method = bin, average_length = 30, perform 30-s bin-average. mrt boolean indicating whether calculate mean response time. implemented soon <-  currently ignored. plot boolean indicating whether produce plot summary results. Default TRUE. verbose boolean indicating whether messages printed console. Default TRUE. ... Additional arguments passed onto incremental_normalize(), detect_outliers() detect_outliers = TRUE,  incremental_mrt() mrt = TRUE.","code":""},{"path":"/reference/vo2_max.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"VO2max — vo2_max","text":"tibble containing one row following columns: VO2max_absolute absolute VO2max. VO2max_relative relative VO2max. POpeak peak power output. HRmax maximal heart rate. RERmax maximal RER. plot plot, plot = TRUE.","code":""},{"path":"/reference/vo2_max.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"VO2max — vo2_max","text":"TODO","code":""},{"path":"/reference/vo2_max.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"VO2max — vo2_max","text":"","code":"if (FALSE) { ## get file path from example data path_example <- system.file(\"ramp_cosmed.xlsx\", package = \"whippr\")  ## read data from ramp test df <- read_data(path = path_example, metabolic_cart = \"cosmed\")  ## normalize incremental test data ramp_normalized <- df %>%  incremental_normalize(    .data = .,    incremental_type = \"ramp\",    has_baseline = TRUE,    baseline_length = 240,    work_rate_magic = TRUE,    baseline_intensity = 20,    ramp_increase = 25  )  ## detect outliers data_ramp_outliers <- detect_outliers(  .data = ramp_normalized,  test_type = \"incremental\",  vo2_column = \"VO2\",  cleaning_level = 0.95,  method_incremental = \"linear\",  verbose = TRUE )  ## analyze VO2max perform_max(  .data = data_ramp_outliers,  vo2_column = \"VO2\",  vo2_relative_column = \"VO2/Kg\",  heart_rate_column = \"HR\",  rer_column = \"R\",  average_method = \"bin\",  average_length = 30,  plot = TRUE,  verbose = FALSE ) }"},{"path":"/reference/whippr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"whippr: Tools for Manipulating Gas Exchange Data — whippr-package","title":"whippr: Tools for Manipulating Gas Exchange Data — whippr-package","text":"Set tools manipulating gas exchange data cardiopulmonary exercise testing.","code":""},{"path":[]},{"path":"/reference/whippr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"whippr: Tools for Manipulating Gas Exchange Data — whippr-package","text":"Maintainer: Felipe Mattioni Maturana felipe.mattioni@med.uni-tuebingen.de (ORCID)","code":""},{"path":"/reference/work_rate_ramp.html","id":null,"dir":"Reference","previous_headings":"","what":"Work rate for a ramp-incremental test — work_rate_ramp","title":"Work rate for a ramp-incremental test — work_rate_ramp","text":"function produces work rate throughout ramp-incremental test given procotol","code":""},{"path":"/reference/work_rate_ramp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work rate for a ramp-incremental test — work_rate_ramp","text":"","code":"work_rate_ramp(.data, baseline_intensity, ramp_increase)"},{"path":"/reference/work_rate_ramp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work rate for a ramp-incremental test — work_rate_ramp","text":".data data recognized protocol phases baseline_intensity baseline intensity ramp_increase ramp increase, watts per minute","code":""},{"path":"/reference/work_rate_ramp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work rate for a ramp-incremental test — work_rate_ramp","text":"tibble","code":""},{"path":"/reference/work_rate_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Work rate for a step-incremental test — work_rate_step","title":"Work rate for a step-incremental test — work_rate_step","text":"function produces work rate throughout step-incremental test given protocol retrieve 'original' work rates, also perform 'linearization' steps.","code":""},{"path":"/reference/work_rate_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Work rate for a step-incremental test — work_rate_step","text":"","code":"work_rate_step(   .data,   baseline_intensity,   step_start,   step_increase,   step_length )"},{"path":"/reference/work_rate_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Work rate for a step-incremental test — work_rate_step","text":".data data recognized protocol phases baseline_intensity baseline intensity step_start case step test started different work rate baseline step_increase step increase, watts per step step_length length, seconds, step","code":""},{"path":"/reference/work_rate_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Work rate for a step-incremental test — work_rate_step","text":"tibble","code":""},{"path":"/news/index.html","id":"whippr-012","dir":"Changelog","previous_headings":"","what":"whippr 0.1.2","title":"whippr 0.1.2","text":"CRAN release: 2022-09-09 Fixed bug read_data.cosmed() made time column return NA values test longer one hour. Added custom option read_data().","code":""},{"path":"/news/index.html","id":"whippr-011","dir":"Changelog","previous_headings":"","what":"whippr 0.1.1","title":"whippr 0.1.1","text":"Updated docs roxygen 7.2.1.","code":""},{"path":"/news/index.html","id":"whippr-010","dir":"Changelog","previous_headings":"","what":"whippr 0.1.0","title":"whippr 0.1.0","text":"CRAN release: 2022-03-09 General cleanup performed reduce dependencies.","code":""},{"path":[]},{"path":"/news/index.html","id":"breaking-changes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"whippr 0.0.0.9000","text":"following function calls simplified: vo2_kinetics() detect_outliers() = time_column argument needed anymore (automatically taken read_data() now). plot_outliers() = test_type argument needed anymore (automatically taken detect_outliers() now). perform_kinetics() = time_column vo2_column arguments needed anymore (automatically taken read_data() detect_outliers()).","code":""},{"path":"/news/index.html","id":"new-functionsmethods-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"New functions/methods","title":"whippr 0.0.0.9000","text":"Added function read_data() read data metabolic cart (COSMED CORTEX). Now can specify name time column, case system English. Default set “t”. Added option read data NSpire system (thanks @peter__leo). Added option read data Parvo Medics system (thanks @EatsleepfitJeff). Added option read data Geratherm Respiratory system (thanks @marcorsini61) Added function interpolate() interpolate breath--breath data second--second. Added function perform_average() perform bin- rolling-averages. Added run_manual_cleaner(). Added testing functions (internal modification , visible user). Added new print method. Added new functionality analyzing data incremental exercise. Added perform_max() vo2_max(). Added support CardioCoach metabolic cart.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"whippr 0.0.0.9000","text":"Fixed issue read_data() using COSMED metabolic cart: previously, character columns coerced NA(thanks @Scott-S-Hannah #4). Added extra argument read_data() automatically fix issue work rate column coerced character column (thanks @ThibauxV). Improved error messages case read_data() find name time column provided. Removed time_column argument interpolate() perform_average() functions. necessary read_data() now. Make sure data contain rows cols NA interpolate() (thanks @Scott-S-Hannah). Fixed issue renaming work rate column read_data() (thanks @Scott-S-Hannah #6).","code":""},{"path":"/news/index.html","id":"vo2-kinetics-analyses-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"VO2 kinetics analyses","title":"whippr 0.0.0.9000","text":"Added set tools VO2 kinetics analyses.","code":""},{"path":"/news/index.html","id":"incremental-test-analyses-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Incremental test analyses","title":"whippr 0.0.0.9000","text":"Added set tools incremental test analyses: data standardization normalization, detection ‘bad breaths’, mean response time, maximal values (.e., VO2max, HRmax, maximal RER, etc), ventilatory thresholds.","code":""}]
